/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.cmu.lti.oaqa.flexneuart.letor.external;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-15")
public class ExternalScorer {

  public interface Iface {

    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> getScoresFromParsed(TextEntryParsed query, java.util.List<TextEntryParsed> docs) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> getScoresFromRaw(TextEntryRaw query, java.util.List<TextEntryRaw> docs) throws ScoringException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getScoresFromParsed(TextEntryParsed query, java.util.List<TextEntryParsed> docs, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException;

    public void getScoresFromRaw(TextEntryRaw query, java.util.List<TextEntryRaw> docs, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> getScoresFromParsed(TextEntryParsed query, java.util.List<TextEntryParsed> docs) throws org.apache.thrift.TException
    {
      send_getScoresFromParsed(query, docs);
      return recv_getScoresFromParsed();
    }

    public void send_getScoresFromParsed(TextEntryParsed query, java.util.List<TextEntryParsed> docs) throws org.apache.thrift.TException
    {
      getScoresFromParsed_args args = new getScoresFromParsed_args();
      args.setQuery(query);
      args.setDocs(docs);
      sendBase("getScoresFromParsed", args);
    }

    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> recv_getScoresFromParsed() throws org.apache.thrift.TException
    {
      getScoresFromParsed_result result = new getScoresFromParsed_result();
      receiveBase(result, "getScoresFromParsed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getScoresFromParsed failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> getScoresFromRaw(TextEntryRaw query, java.util.List<TextEntryRaw> docs) throws ScoringException, org.apache.thrift.TException
    {
      send_getScoresFromRaw(query, docs);
      return recv_getScoresFromRaw();
    }

    public void send_getScoresFromRaw(TextEntryRaw query, java.util.List<TextEntryRaw> docs) throws org.apache.thrift.TException
    {
      getScoresFromRaw_args args = new getScoresFromRaw_args();
      args.setQuery(query);
      args.setDocs(docs);
      sendBase("getScoresFromRaw", args);
    }

    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> recv_getScoresFromRaw() throws ScoringException, org.apache.thrift.TException
    {
      getScoresFromRaw_result result = new getScoresFromRaw_result();
      receiveBase(result, "getScoresFromRaw");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getScoresFromRaw failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getScoresFromParsed(TextEntryParsed query, java.util.List<TextEntryParsed> docs, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getScoresFromParsed_call method_call = new getScoresFromParsed_call(query, docs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getScoresFromParsed_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> {
      private TextEntryParsed query;
      private java.util.List<TextEntryParsed> docs;
      public getScoresFromParsed_call(TextEntryParsed query, java.util.List<TextEntryParsed> docs, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.docs = docs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getScoresFromParsed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getScoresFromParsed_args args = new getScoresFromParsed_args();
        args.setQuery(query);
        args.setDocs(docs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getScoresFromParsed();
      }
    }

    public void getScoresFromRaw(TextEntryRaw query, java.util.List<TextEntryRaw> docs, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getScoresFromRaw_call method_call = new getScoresFromRaw_call(query, docs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getScoresFromRaw_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> {
      private TextEntryRaw query;
      private java.util.List<TextEntryRaw> docs;
      public getScoresFromRaw_call(TextEntryRaw query, java.util.List<TextEntryRaw> docs, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.util.List<java.lang.Double>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.docs = docs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getScoresFromRaw", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getScoresFromRaw_args args = new getScoresFromRaw_args();
        args.setQuery(query);
        args.setDocs(docs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> getResult() throws ScoringException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getScoresFromRaw();
      }
    }

  }

  public static class getScoresFromParsed_args implements org.apache.thrift.TBase<getScoresFromParsed_args, getScoresFromParsed_args._Fields>, java.io.Serializable, Cloneable, Comparable<getScoresFromParsed_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getScoresFromParsed_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCS_FIELD_DESC = new org.apache.thrift.protocol.TField("docs", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getScoresFromParsed_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getScoresFromParsed_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TextEntryParsed query; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<TextEntryParsed> docs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      DOCS((short)2, "docs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // DOCS
            return DOCS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TextEntryParsed.class)));
      tmpMap.put(_Fields.DOCS, new org.apache.thrift.meta_data.FieldMetaData("docs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TextEntryParsed.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getScoresFromParsed_args.class, metaDataMap);
    }

    public getScoresFromParsed_args() {
    }

    public getScoresFromParsed_args(
      TextEntryParsed query,
      java.util.List<TextEntryParsed> docs)
    {
      this();
      this.query = query;
      this.docs = docs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getScoresFromParsed_args(getScoresFromParsed_args other) {
      if (other.isSetQuery()) {
        this.query = new TextEntryParsed(other.query);
      }
      if (other.isSetDocs()) {
        java.util.List<TextEntryParsed> __this__docs = new java.util.ArrayList<TextEntryParsed>(other.docs.size());
        for (TextEntryParsed other_element : other.docs) {
          __this__docs.add(new TextEntryParsed(other_element));
        }
        this.docs = __this__docs;
      }
    }

    public getScoresFromParsed_args deepCopy() {
      return new getScoresFromParsed_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.docs = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TextEntryParsed getQuery() {
      return this.query;
    }

    public getScoresFromParsed_args setQuery(@org.apache.thrift.annotation.Nullable TextEntryParsed query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public int getDocsSize() {
      return (this.docs == null) ? 0 : this.docs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TextEntryParsed> getDocsIterator() {
      return (this.docs == null) ? null : this.docs.iterator();
    }

    public void addToDocs(TextEntryParsed elem) {
      if (this.docs == null) {
        this.docs = new java.util.ArrayList<TextEntryParsed>();
      }
      this.docs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<TextEntryParsed> getDocs() {
      return this.docs;
    }

    public getScoresFromParsed_args setDocs(@org.apache.thrift.annotation.Nullable java.util.List<TextEntryParsed> docs) {
      this.docs = docs;
      return this;
    }

    public void unsetDocs() {
      this.docs = null;
    }

    /** Returns true if field docs is set (has been assigned a value) and false otherwise */
    public boolean isSetDocs() {
      return this.docs != null;
    }

    public void setDocsIsSet(boolean value) {
      if (!value) {
        this.docs = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((TextEntryParsed)value);
        }
        break;

      case DOCS:
        if (value == null) {
          unsetDocs();
        } else {
          setDocs((java.util.List<TextEntryParsed>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case DOCS:
        return getDocs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case DOCS:
        return isSetDocs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getScoresFromParsed_args)
        return this.equals((getScoresFromParsed_args)that);
      return false;
    }

    public boolean equals(getScoresFromParsed_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_docs = true && this.isSetDocs();
      boolean that_present_docs = true && that.isSetDocs();
      if (this_present_docs || that_present_docs) {
        if (!(this_present_docs && that_present_docs))
          return false;
        if (!this.docs.equals(that.docs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      hashCode = hashCode * 8191 + ((isSetDocs()) ? 131071 : 524287);
      if (isSetDocs())
        hashCode = hashCode * 8191 + docs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getScoresFromParsed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDocs()).compareTo(other.isSetDocs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docs, other.docs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getScoresFromParsed_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("docs:");
      if (this.docs == null) {
        sb.append("null");
      } else {
        sb.append(this.docs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (query == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
      }
      if (docs == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'docs' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getScoresFromParsed_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getScoresFromParsed_argsStandardScheme getScheme() {
        return new getScoresFromParsed_argsStandardScheme();
      }
    }

    private static class getScoresFromParsed_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getScoresFromParsed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getScoresFromParsed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new TextEntryParsed();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.docs = new java.util.ArrayList<TextEntryParsed>(_list8.size);
                  @org.apache.thrift.annotation.Nullable TextEntryParsed _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new TextEntryParsed();
                    _elem9.read(iprot);
                    struct.docs.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setDocsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getScoresFromParsed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.docs != null) {
          oprot.writeFieldBegin(DOCS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.docs.size()));
            for (TextEntryParsed _iter11 : struct.docs)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getScoresFromParsed_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getScoresFromParsed_argsTupleScheme getScheme() {
        return new getScoresFromParsed_argsTupleScheme();
      }
    }

    private static class getScoresFromParsed_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getScoresFromParsed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getScoresFromParsed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.query.write(oprot);
        {
          oprot.writeI32(struct.docs.size());
          for (TextEntryParsed _iter12 : struct.docs)
          {
            _iter12.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getScoresFromParsed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.query = new TextEntryParsed();
        struct.query.read(iprot);
        struct.setQueryIsSet(true);
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.docs = new java.util.ArrayList<TextEntryParsed>(_list13.size);
          @org.apache.thrift.annotation.Nullable TextEntryParsed _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new TextEntryParsed();
            _elem14.read(iprot);
            struct.docs.add(_elem14);
          }
        }
        struct.setDocsIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getScoresFromParsed_result implements org.apache.thrift.TBase<getScoresFromParsed_result, getScoresFromParsed_result._Fields>, java.io.Serializable, Cloneable, Comparable<getScoresFromParsed_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getScoresFromParsed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getScoresFromParsed_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getScoresFromParsed_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getScoresFromParsed_result.class, metaDataMap);
    }

    public getScoresFromParsed_result() {
    }

    public getScoresFromParsed_result(
      java.util.Map<java.lang.String,java.util.List<java.lang.Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getScoresFromParsed_result(getScoresFromParsed_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.util.List<java.lang.Double>> __this__success = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Double>>(other.success.size());
        for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Double>> other_element : other.success.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          java.util.List<java.lang.Double> other_element_value = other_element.getValue();

          java.lang.String __this__success_copy_key = other_element_key;

          java.util.List<java.lang.Double> __this__success_copy_value = new java.util.ArrayList<java.lang.Double>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getScoresFromParsed_result deepCopy() {
      return new getScoresFromParsed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.util.List<java.lang.Double> val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Double>>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> getSuccess() {
      return this.success;
    }

    public getScoresFromParsed_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.util.List<java.lang.Double>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getScoresFromParsed_result)
        return this.equals((getScoresFromParsed_result)that);
      return false;
    }

    public boolean equals(getScoresFromParsed_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getScoresFromParsed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getScoresFromParsed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getScoresFromParsed_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getScoresFromParsed_resultStandardScheme getScheme() {
        return new getScoresFromParsed_resultStandardScheme();
      }
    }

    private static class getScoresFromParsed_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getScoresFromParsed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getScoresFromParsed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Double>>(2*_map16.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key17;
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _val18;
                  for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                  {
                    _key17 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                      _val18 = new java.util.ArrayList<java.lang.Double>(_list20.size);
                      double _elem21;
                      for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                      {
                        _elem21 = iprot.readDouble();
                        _val18.add(_elem21);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key17, _val18);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getScoresFromParsed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Double>> _iter23 : struct.success.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter23.getValue().size()));
                for (double _iter24 : _iter23.getValue())
                {
                  oprot.writeDouble(_iter24);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getScoresFromParsed_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getScoresFromParsed_resultTupleScheme getScheme() {
        return new getScoresFromParsed_resultTupleScheme();
      }
    }

    private static class getScoresFromParsed_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getScoresFromParsed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getScoresFromParsed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Double>> _iter25 : struct.success.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              {
                oprot.writeI32(_iter25.getValue().size());
                for (double _iter26 : _iter25.getValue())
                {
                  oprot.writeDouble(_iter26);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getScoresFromParsed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Double>>(2*_map27.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key28;
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _val29;
            for (int _i30 = 0; _i30 < _map27.size; ++_i30)
            {
              _key28 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val29 = new java.util.ArrayList<java.lang.Double>(_list31.size);
                double _elem32;
                for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                {
                  _elem32 = iprot.readDouble();
                  _val29.add(_elem32);
                }
              }
              struct.success.put(_key28, _val29);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getScoresFromRaw_args implements org.apache.thrift.TBase<getScoresFromRaw_args, getScoresFromRaw_args._Fields>, java.io.Serializable, Cloneable, Comparable<getScoresFromRaw_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getScoresFromRaw_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCS_FIELD_DESC = new org.apache.thrift.protocol.TField("docs", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getScoresFromRaw_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getScoresFromRaw_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TextEntryRaw query; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<TextEntryRaw> docs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      DOCS((short)2, "docs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // DOCS
            return DOCS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TextEntryRaw.class)));
      tmpMap.put(_Fields.DOCS, new org.apache.thrift.meta_data.FieldMetaData("docs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TextEntryRaw.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getScoresFromRaw_args.class, metaDataMap);
    }

    public getScoresFromRaw_args() {
    }

    public getScoresFromRaw_args(
      TextEntryRaw query,
      java.util.List<TextEntryRaw> docs)
    {
      this();
      this.query = query;
      this.docs = docs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getScoresFromRaw_args(getScoresFromRaw_args other) {
      if (other.isSetQuery()) {
        this.query = new TextEntryRaw(other.query);
      }
      if (other.isSetDocs()) {
        java.util.List<TextEntryRaw> __this__docs = new java.util.ArrayList<TextEntryRaw>(other.docs.size());
        for (TextEntryRaw other_element : other.docs) {
          __this__docs.add(new TextEntryRaw(other_element));
        }
        this.docs = __this__docs;
      }
    }

    public getScoresFromRaw_args deepCopy() {
      return new getScoresFromRaw_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.docs = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TextEntryRaw getQuery() {
      return this.query;
    }

    public getScoresFromRaw_args setQuery(@org.apache.thrift.annotation.Nullable TextEntryRaw query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public int getDocsSize() {
      return (this.docs == null) ? 0 : this.docs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TextEntryRaw> getDocsIterator() {
      return (this.docs == null) ? null : this.docs.iterator();
    }

    public void addToDocs(TextEntryRaw elem) {
      if (this.docs == null) {
        this.docs = new java.util.ArrayList<TextEntryRaw>();
      }
      this.docs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<TextEntryRaw> getDocs() {
      return this.docs;
    }

    public getScoresFromRaw_args setDocs(@org.apache.thrift.annotation.Nullable java.util.List<TextEntryRaw> docs) {
      this.docs = docs;
      return this;
    }

    public void unsetDocs() {
      this.docs = null;
    }

    /** Returns true if field docs is set (has been assigned a value) and false otherwise */
    public boolean isSetDocs() {
      return this.docs != null;
    }

    public void setDocsIsSet(boolean value) {
      if (!value) {
        this.docs = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((TextEntryRaw)value);
        }
        break;

      case DOCS:
        if (value == null) {
          unsetDocs();
        } else {
          setDocs((java.util.List<TextEntryRaw>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case DOCS:
        return getDocs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case DOCS:
        return isSetDocs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getScoresFromRaw_args)
        return this.equals((getScoresFromRaw_args)that);
      return false;
    }

    public boolean equals(getScoresFromRaw_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_docs = true && this.isSetDocs();
      boolean that_present_docs = true && that.isSetDocs();
      if (this_present_docs || that_present_docs) {
        if (!(this_present_docs && that_present_docs))
          return false;
        if (!this.docs.equals(that.docs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      hashCode = hashCode * 8191 + ((isSetDocs()) ? 131071 : 524287);
      if (isSetDocs())
        hashCode = hashCode * 8191 + docs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getScoresFromRaw_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDocs()).compareTo(other.isSetDocs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docs, other.docs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getScoresFromRaw_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("docs:");
      if (this.docs == null) {
        sb.append("null");
      } else {
        sb.append(this.docs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (query == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
      }
      if (docs == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'docs' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getScoresFromRaw_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getScoresFromRaw_argsStandardScheme getScheme() {
        return new getScoresFromRaw_argsStandardScheme();
      }
    }

    private static class getScoresFromRaw_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getScoresFromRaw_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getScoresFromRaw_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new TextEntryRaw();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.docs = new java.util.ArrayList<TextEntryRaw>(_list34.size);
                  @org.apache.thrift.annotation.Nullable TextEntryRaw _elem35;
                  for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                  {
                    _elem35 = new TextEntryRaw();
                    _elem35.read(iprot);
                    struct.docs.add(_elem35);
                  }
                  iprot.readListEnd();
                }
                struct.setDocsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getScoresFromRaw_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.docs != null) {
          oprot.writeFieldBegin(DOCS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.docs.size()));
            for (TextEntryRaw _iter37 : struct.docs)
            {
              _iter37.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getScoresFromRaw_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getScoresFromRaw_argsTupleScheme getScheme() {
        return new getScoresFromRaw_argsTupleScheme();
      }
    }

    private static class getScoresFromRaw_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getScoresFromRaw_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getScoresFromRaw_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.query.write(oprot);
        {
          oprot.writeI32(struct.docs.size());
          for (TextEntryRaw _iter38 : struct.docs)
          {
            _iter38.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getScoresFromRaw_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.query = new TextEntryRaw();
        struct.query.read(iprot);
        struct.setQueryIsSet(true);
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.docs = new java.util.ArrayList<TextEntryRaw>(_list39.size);
          @org.apache.thrift.annotation.Nullable TextEntryRaw _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = new TextEntryRaw();
            _elem40.read(iprot);
            struct.docs.add(_elem40);
          }
        }
        struct.setDocsIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getScoresFromRaw_result implements org.apache.thrift.TBase<getScoresFromRaw_result, getScoresFromRaw_result._Fields>, java.io.Serializable, Cloneable, Comparable<getScoresFromRaw_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getScoresFromRaw_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getScoresFromRaw_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getScoresFromRaw_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.Double>> success; // required
    public @org.apache.thrift.annotation.Nullable ScoringException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScoringException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getScoresFromRaw_result.class, metaDataMap);
    }

    public getScoresFromRaw_result() {
    }

    public getScoresFromRaw_result(
      java.util.Map<java.lang.String,java.util.List<java.lang.Double>> success,
      ScoringException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getScoresFromRaw_result(getScoresFromRaw_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.util.List<java.lang.Double>> __this__success = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Double>>(other.success.size());
        for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Double>> other_element : other.success.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          java.util.List<java.lang.Double> other_element_value = other_element.getValue();

          java.lang.String __this__success_copy_key = other_element_key;

          java.util.List<java.lang.Double> __this__success_copy_value = new java.util.ArrayList<java.lang.Double>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new ScoringException(other.err);
      }
    }

    public getScoresFromRaw_result deepCopy() {
      return new getScoresFromRaw_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.util.List<java.lang.Double> val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Double>>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.util.List<java.lang.Double>> getSuccess() {
      return this.success;
    }

    public getScoresFromRaw_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ScoringException getErr() {
      return this.err;
    }

    public getScoresFromRaw_result setErr(@org.apache.thrift.annotation.Nullable ScoringException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.util.List<java.lang.Double>>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((ScoringException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getScoresFromRaw_result)
        return this.equals((getScoresFromRaw_result)that);
      return false;
    }

    public boolean equals(getScoresFromRaw_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
      if (isSetErr())
        hashCode = hashCode * 8191 + err.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getScoresFromRaw_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getScoresFromRaw_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getScoresFromRaw_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getScoresFromRaw_resultStandardScheme getScheme() {
        return new getScoresFromRaw_resultStandardScheme();
      }
    }

    private static class getScoresFromRaw_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getScoresFromRaw_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getScoresFromRaw_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Double>>(2*_map42.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key43;
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _val44;
                  for (int _i45 = 0; _i45 < _map42.size; ++_i45)
                  {
                    _key43 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                      _val44 = new java.util.ArrayList<java.lang.Double>(_list46.size);
                      double _elem47;
                      for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                      {
                        _elem47 = iprot.readDouble();
                        _val44.add(_elem47);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key43, _val44);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new ScoringException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getScoresFromRaw_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Double>> _iter49 : struct.success.entrySet())
            {
              oprot.writeString(_iter49.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter49.getValue().size()));
                for (double _iter50 : _iter49.getValue())
                {
                  oprot.writeDouble(_iter50);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getScoresFromRaw_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getScoresFromRaw_resultTupleScheme getScheme() {
        return new getScoresFromRaw_resultTupleScheme();
      }
    }

    private static class getScoresFromRaw_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getScoresFromRaw_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getScoresFromRaw_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Double>> _iter51 : struct.success.entrySet())
            {
              oprot.writeString(_iter51.getKey());
              {
                oprot.writeI32(_iter51.getValue().size());
                for (double _iter52 : _iter51.getValue())
                {
                  oprot.writeDouble(_iter52);
                }
              }
            }
          }
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getScoresFromRaw_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map53 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Double>>(2*_map53.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key54;
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _val55;
            for (int _i56 = 0; _i56 < _map53.size; ++_i56)
            {
              _key54 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val55 = new java.util.ArrayList<java.lang.Double>(_list57.size);
                double _elem58;
                for (int _i59 = 0; _i59 < _list57.size; ++_i59)
                {
                  _elem58 = iprot.readDouble();
                  _val55.add(_elem58);
                }
              }
              struct.success.put(_key54, _val55);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new ScoringException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
